#!/bin/bash

# set the queueing system commands

# current 2018- SC-RTP SLURM system
#SBATCH --ntask=1
#SBATCH --cpus-per-task=16
#SBATCH --mem=2000
#SBATCH --time=04:00:00
#SBATCH --output=./log/${NAME}.log
#SBATCH --job-name=${NAME}

# pre-2018 SC-RTP desktop torque/maob system
##PBS -l nodes=1:ppn=16,pmem=2000mb,walltime=04:00:00
##PBS -V
##PBS -k oe
##PBS -j oe
##PBS -e ./log
##PBS -o ./log
##PBS -N ${NAME}

# compute run parameters
name=${NAME}
oldFileName=${ORIGNAME}
code=${CODE}
time=${TIME}
pyName=${PYNAME}
pyTrue="0"
res=${RES}
isUnix=${ISUNIX}
waters=${WATERS}
combi=${COMBI}
multiple=${MULTIPLE}
threed=${THREED}
fileKeep=${FILEKEEP}
confs=${CONFS}
freq=${FREQ}
step=${STEP}
dstep=${DSTEP}
email=${EMAIL}
molList=${MOLLIST}
modList=${MODLIST}
cutList=${CUTLIST}
PWD=${LOC}
REMOTESCRIPT=${RETDIR}
comment=${COMMENT}
TMP="$PWD/pdb_tmp"
DEST="$PWD/pdb_des"
EXECSRC="$PWD/pdb2movie"
purename=$(sed 's/.\{4\}$//' <<< "$name")
webServerUser=pdb2movie
webServerLoc=${LOCALHOST}

#if values are empty or false booleans, do not include in command line
if [ $waters -eq 1 ] ; then
	sWaters="--waters "
fi
if [ $combi -eq 1 ] ; then
	sCombi="--combi "
fi
if [ $multiple -eq 1 ] ; then
	sMulti="--multiple "
fi
if [ $threed -eq 1 ] ; then
	sThreed="--threed "
fi
if [ -n "$confs" ]; then
	sConfs="--confs $confs "
fi
if [ -n "$freq" ]; then
	sFreq="--freq $freq "
fi
if [ -n "$step" ]; then
	sStep="--step $step "
fi
if [ -n "$dstep" ]; then
	sDStep="--dstep $dstep "
fi
if [ "$molList" != "NULL" ]; then
	sMolList="--keep $molList"
fi
if [ "$modList" != "NULL" ]; then
        sModList="--modes $modList "
fi
if [ "$cutList" != "NULL" ]; then
	sCutList="--ecuts $cutList "
fi
if [ -n "$pyName" ]; then
	sPyName="--video $TMP/$pyName "
fi

com="python3 $EXECSRC/pdb2movie.py $TMP/$name --res $res $sWaters $sCombi $sMulti $sConfs $sThreed $sCombi $sFreq $sStep $sDStep $sModList $sMolList $sCutList $sPyName"
args="$oldFileName $pyTrue '$res' $waters $combi $multiple $threed $confs $freq $step $dstep '$molList' '$modList' '$cutList' '$time' $code '$comment'"

# write compute parameters to screen for easier debugging
echo "NAME="$name
echo "RES="$res
echo "WATERS="$waters
echo "COMBI"$combi
echo "MULTIPLE="$multiple
echo "THREED="$threed
echo "FILEKEEP="$fileKeep
echo "CONFS="$confs
echo "FREQ="$freq
echo "STEP="$step
echo "DSTEP="$dstep
echo "EMAIL="$email
echo "MOLLIST="$molList
echo "MODLIST="$modList
echo "CUTLIST="$cutList
echo "COMMENT="$comment
echo "PWD="$PWD
echo "REMOTESCRIPT="$REMOTESCRIPT
echo "TMP="$TMP
echo "DEST="$DEST
echo "EXC="$EXECSRC
echo "PURENAME="$purename
echo "COM="$com
echo "PYNAME="$pyName
echo "ARGS="$args

# MAIL: 1st email to acknowledge receipt of compute request
ssh $webServerUser@$webServerLoc "cd $REMOTESCRIPT; $REMOTESCRIPT/updateTimeStarted.sh $purename; $REMOTESCRIPT/mailer.sh $email 'pdb2movie: Request Proccessing Has Began' processing.txt NULL $args"
echo $FREEMOL

# run main command
echo $com >$TMP/$purename/$purename_command.txt
eval $com

# create a file with all parameters to sent back to user with computed job output
newFile=$TMP/$purename/$oldFileName-params.txt
echo "NAME="$name"\n">>$newFile
echo "RES="$res"\n">>$newFile
echo "WATERS="$waters"\n">>$newFile
echo "COMBI"$combi"\n">>$newFile
echo "MULTIPLE="$multiple"\n">>$newFile
echo "THREED="$threed"\n">>$newFile
echo "FILEKEEP="$fileKeep"\n">>$newFile
echo "CONFS="$confs"\n">>$newFile
echo "FREQ="$freq"\n">>$newFile
echo "STEP="$step"\n">>$newFile
echo "DSTEP="$dstep"\n">>$newFile
echo "EMAIL="$email"\n">>$newFile
echo "MOLLIST="$molList"\n">>$newFile
echo "MODLIST="$modList"\n">>$newFile
echo "CUTLIST="$cutList"\n">>$newFile
echo "COMMENT="$comment"\n">>$newFile

# move some local output files into temporary directories
mv $TMP/$purename.pdb $TMP/$purename/
mv $TMP/$purename.py $TMP/$purename/

# copy computed output into files for download
cd $TMP/$purename;
cp $purename.pdb $oldFileName
cp $purename.py supplied_video_params.py
cp $purename*.ps $oldFileName.ps

# prepare compressed files for final download link

if [ $isUnix -eq 1 ]; then 

    # create .tar.gz file for download
    tar -cvf $purename.tar Run-*
    if [ $fileKeep -eq 1 ]; then
	tar -rf $purename.tar Runs/ Modes/
    fi
    tar -rf $purename.tar $oldFileName
    tar -rf $purename.tar supplied_video_params.py
    tar -rf $purename.tar $oldFileName-params.txt
    tar -rf $purename.tar $oldFileName.ps
    gzip $purename.tar
    mv $purename.tar.gz $DEST/ ;
    SUFFIX='.tar.gz'

else

    # create .zip file for download
    if [ $fileKeep -eq 1 ]; then
	zip -9 -r $purename.zip Runs/* Modes/* Run-* $oldFileName supplied_video_params.py $oldFileName-params.txt $oldFileName.ps
    else
	zip -9 -r $purename.zip Run-* $oldFileName supplied_video_params.py $oldFileName-params.txt $oldFileName.ps
    fi
    mv $purename.zip $DEST/ ;
    SUFFIX='.zip'
    
fi
cd -;

# copy download file to download place on web server
scp -v $DEST/$purename$SUFFIX $webServerUser@$webServerLoc:/var/www/html/download/

if [ $? -eq 0 ]; then

    if [ $webServerLoc == "advid.lnx.warwick.ac.uk" ]; then
	# use production server
	URL="pdb2movie.warwick.ac.uk"
    else
	# use test server
	URL=$webServerLoc
    fi

    # MAIL: 3d email to send download link 
    ssh $webServerUser@$webServerLoc "cd $REMOTESCRIPT; ./mailer.sh $email 'pdb2movie: Request Complete' complete.txt $URL/download/$purename$SUFFIX $args; $REMOTESCRIPT/updateFinishedTask.sh $purename"
    
else
    # MAIL: ERROR mailing
    ssh $webServerUser@$webServerLoc "cd $REMOTESCRIPT; ./mailer.sh $email 'pdb2movie: Request Error' error.txt NULL $args; $REMOTESCRIPT/updateFinishedTask.sh $purename"
    
fi

#rm $DEST/$purename$SUFFIX;
#rm -r $TMP/$purename*;    
#rm -rf $TMP/$purename/
